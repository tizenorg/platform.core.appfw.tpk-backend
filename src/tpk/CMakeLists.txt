SET(SRCS
    step/step_check_tpk_background_category.cc
    step/step_create_symbolic_link.cc
    step/step_parse.cc
    step/step_parse_recovery.cc
    step/step_convert_xml.cc
    tpk_app_query_interface.cc
    tpk_installer.cc
)
ADD_LIBRARY(${TARGET_LIBNAME_TPK} SHARED ${SRCS})
ADD_EXECUTABLE(${TARGET_TPK_BACKEND} "tpk_backend.cc")

TARGET_INCLUDE_DIRECTORIES(${TARGET_LIBNAME_TPK} PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/../")
TARGET_INCLUDE_DIRECTORIES(${TARGET_TPK_BACKEND} PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/../")

APPLY_PKG_CONFIG(${TARGET_LIBNAME_TPK} PUBLIC
  APP_INSTALLERS_DEPS
  PKGMGR_DEPS
  TPK_MANIFEST_HANDLERS_DEPS
  MANIFEST_PARSER_DEPS
  Boost
)

TARGET_LINK_LIBRARIES(${TARGET_TPK_BACKEND} PRIVATE ${TARGET_LIBNAME_TPK})

INSTALL(TARGETS ${TARGET_LIBNAME_TPK} DESTINATION ${LIB_INSTALL_DIR})
INSTALL(TARGETS ${TARGET_TPK_BACKEND} DESTINATION ${BINDIR})

# Export devel package
CONFIGURE_FILE(tpk-installer.pc.in tpk-installer.pc @ONLY)
INSTALL(FILES tpk-installer.pc DESTINATION ${LIB_INSTALL_DIR}/pkgconfig)
INSTALL(DIRECTORY ./ DESTINATION ${INCLUDEDIR}/app-installers/tpk/
        FILES_MATCHING PATTERN "*.h")
